// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.2.4 (swiftlang-1103.0.32.9 clang-1103.0.32.53)
// swift-module-flags: -target x86_64-apple-ios13.5-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Trackflowai
import SystemConfiguration.CaptiveNetwork
import CoreMotion
import Foundation
import QuartzCore
import SocketIO
import Swift
import SystemConfiguration
import UIKit
@objc @_inheritsConvenienceInitializers public class TFAutomaticScreenCapture : ObjectiveC.NSObject {
  public static let shared: Trackflowai.TFAutomaticScreenCapture
  @objc override dynamic public init()
  public func start()
  public func stop()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class TFURLProtocol : Foundation.URLProtocol {
  @objc override dynamic public var task: Foundation.URLSessionTask? {
    @objc get
    @objc set
  }
  @objc override dynamic public class func canInit(with request: Foundation.URLRequest) -> Swift.Bool
  @objc override dynamic public class func canInit(with task: Foundation.URLSessionTask) -> Swift.Bool
  @objc override dynamic public class func canonicalRequest(for request: Foundation.URLRequest) -> Foundation.URLRequest
  @objc override dynamic public func startLoading()
  @objc override dynamic public func stopLoading()
  @objc deinit
  @objc override dynamic public init(request: Foundation.URLRequest, cachedResponse: Foundation.CachedURLResponse?, client: Foundation.URLProtocolClient?)
}
extension TFURLProtocol : Foundation.NSURLConnectionDelegate {
  @objc dynamic public func connection(_ connection: Foundation.NSURLConnection, didFailWithError error: Swift.Error)
}
extension TFURLProtocol : Foundation.NSURLConnectionDataDelegate {
  @objc dynamic public func connection(_ connection: Foundation.NSURLConnection, didReceive data: Foundation.Data)
  @objc dynamic public func connection(_ connection: Foundation.NSURLConnection, didReceive response: Foundation.URLResponse)
  @objc dynamic public func connectionDidFinishLoading(_ connection: Foundation.NSURLConnection)
}
@objc @_inheritsConvenienceInitializers public class Trackflow : ObjectiveC.NSObject {
  public static let shared: Trackflowai.Trackflow
  @objc override dynamic public init()
  public func startTracking(apiKey: Swift.String)
  public func startTracking(apiKey: Swift.String, isProduction: Swift.Bool)
  public func startTracking(apiKey: Swift.String, with: [Trackflowai.TFTrackingOptions])
  public func startTrackingForURLRequest(apiKey: Swift.String)
  public func startTrackingForURLRequest(apiKey: Swift.String, isProduction: Swift.Bool)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class TFConstants {
  public static let TRACKFLOW_ENDPOINT: Swift.String
  public static let TRACKFLOW_STAGING_ENDPOINT: Swift.String
  public static let SOCKET_ON_CONNECT: Swift.String
  public static let SOCKET_ON_ERROR: Swift.String
  public static let SOCKET_ON_ACK: Swift.String
  public static let SOCKET_ON_SCREENSHOTREQ: Swift.String
  public static let SOCKET_ON_ASYNCSTORAGEREQ: Swift.String
  public static let SOCKET_ON_DEVICEINFOREQ: Swift.String
  public static let SOCKET_ON_LOCATIONOREQ: Swift.String
  public static let SOCKET_ON_PERMISSIONREQ: Swift.String
  public static let SOCKET_SEND_DEVICE_INIT: Swift.String
  public static let SOCKET_SEND_LOG_INFO: Swift.String
  public static let SOCKET_SEND_PERMISSION: Swift.String
  public static let SOCKET_SEND_MEMUSAGE: Swift.String
  public static let SOCKET_SEND_SCREENSHOT: Swift.String
  public static let SOCKET_SEND_ASYNCSTORAGE: Swift.String
  public static let SOCKET_SEND_DEVICEINFO: Swift.String
  public static let SOCKET_SEND_LOCATION: Swift.String
  public static let SOCKET_SEND_USERDEFAULTS: Swift.String
  public static let SOCKET_SEND_SCREENNAME: Swift.String
  public static let SOCKET_AUTO_SCREENSHOT: Swift.String
  public static let SOCKET_SHAKE_SCREENSHOT: Swift.String
  public static var isURLSessionEnabled: Swift.Bool
  public static var isScreenShotReqEnabled: Swift.Bool
  public static var isPermissionsEnabled: Swift.Bool
  public static var isAsyncStorageReq: Swift.Bool
  public static var isDeviceInfoReq: Swift.Bool
  public static var isAutomaticScreenshotEnabled: Swift.Bool
  public static var isShakeDeviceEnabled: Swift.Bool
  public static var SCREEN_NAME: Swift.String
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class TFUtils : ObjectiveC.NSObject {
  public static let shared: Trackflowai.TFUtils
  public func getMinutesDifferenceFromTwoDates(start: Foundation.Date, end: Foundation.Date) -> Swift.Int
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class TFRegister : ObjectiveC.NSObject {
  public static let shared: Trackflowai.TFRegister
  @objc override dynamic public init()
  public func registerProtocol()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class TFLog : ObjectiveC.NSObject {
  public static let shared: Trackflowai.TFLog
  public func showErrorLog(errorMsg: Swift.String)
  public func showMessage(msg: Swift.String)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class Transporter : ObjectiveC.NSObject {
  public static let shared: Trackflowai.Transporter
  @objc override dynamic public init()
  public func connect(url: Swift.String, params: [Swift.String : Swift.String])
  public func connectWithNamespace(url: Swift.String, params: [Swift.String : Swift.String])
  public func disconnect()
  public func getConnection() -> SocketIO.SocketIOClient
  public func isConnected() -> Swift.Bool
  public func listenEvents()
  public func sendNetworkLog(log: Swift.String)
  public func sendCapturedImageData(data: Swift.String, id: Swift.Int, scName: Swift.String)
  public func sendAutoCapturedImageData(data: Swift.String, scName: Swift.String)
  public func sendShakeCapturedImageData(data: Swift.String, scName: Swift.String)
  public func fetchPermissionLog()
  public func sendLogData(log: [Swift.String : Any])
  public func sendScreenName(scName: Swift.String)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class TFBuild : ObjectiveC.NSObject {
  public static let shared: Trackflowai.TFBuild
  @objc override dynamic public init()
  public func getBuildVersion() -> Swift.String
  public func getBuildNumber() -> Swift.String
  public func getAppBundle() -> Swift.String
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class TFAutoCapture : ObjectiveC.NSObject {
  public static let shared: Trackflowai.TFAutoCapture
  public func screenshot()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class TFPermissionManager : ObjectiveC.NSObject {
  public static let shared: Trackflowai.TFPermissionManager
  public func getPermissionList() -> [Swift.String : Any]
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class TFIdentifier : ObjectiveC.NSObject {
  public static let shared: Trackflowai.TFIdentifier
  @objc override dynamic public init()
  public func setScreenName(scName: Swift.String)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class TFUserDefaults : ObjectiveC.NSObject {
  public static let shared: Trackflowai.TFUserDefaults
  @objc override dynamic public init()
  public func getUserDefaults() -> Swift.String
  @objc deinit
}
public enum TFTrackingOptions : Swift.String {
  case shakeToCapture
  case urlRequest
  case autoCapture
  case permissions
  case screenShotReqFromWeb
  case asyncStorage
  case deviceInfo
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class TFCaptureManager : ObjectiveC.NSObject {
  public static let shared: Trackflowai.TFCaptureManager
  public func capture() -> Swift.String
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class TFManager : ObjectiveC.NSObject {
  public static let shared: Trackflowai.TFManager
  @objc override dynamic public init()
  public func start(apiKey: Swift.String)
  public func start(apiKey: Swift.String, isProduction: Swift.Bool)
  public func startWithNamespace(apiKey: Swift.String, isProduction: Swift.Bool)
  public func getQueryDict(apiKey: Swift.String) -> [Swift.String : Swift.String]
  public func sendNetworkLog(log: Swift.String)
  public func logAsyncStorage(asyncstorge: Swift.String)
  public func getDetails()
  public func getTrackflowVersion() -> Swift.String
  public func captureScreenshot() -> Swift.String
  public func getPermission()
  public func initDeviceInfo() -> Foundation.NSMutableDictionary
  public func getInitInfo() -> Foundation.NSMutableDictionary
  public func getDeviceInfo() -> Foundation.NSMutableDictionary
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class TFDeviceManager : ObjectiveC.NSObject {
  public static let shared: Trackflowai.TFDeviceManager
  public func getDeviceId() -> Swift.String
  public func getDeviceModel() -> Swift.String
  public func getDeviceName() -> Swift.String
  public func getWiFiSsid() -> Swift.String
  public func getInterfaces() -> Swift.Bool
  public func getIPAddress() -> Swift.String?
  public func batteryStatus() -> Swift.String
  public func getLocation()
  public func getDeviceToken() -> Swift.String
  public func getTotalDeviceMemory() -> Swift.String
  public func getDeviceProcessorCount() -> Swift.String
  public func getOSInfo() -> Swift.String
  public func getOrientation() -> Swift.String
  public func getIsLowPowerMode() -> Swift.Bool
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class TFPlistManager : ObjectiveC.NSObject {
  public static let shared: Trackflowai.TFPlistManager
  final public let infoPlistDict: [Swift.String : Any]?
  public func getInfoPlistValue(withKey key: Swift.String) -> Swift.String?
  public func getInfoPlist() -> [Swift.String : Any]
  @objc override dynamic public init()
  @objc deinit
}
extension Trackflowai.TFTrackingOptions : Swift.Equatable {}
extension Trackflowai.TFTrackingOptions : Swift.Hashable {}
extension Trackflowai.TFTrackingOptions : Swift.RawRepresentable {}
